{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IT\\\\Documents\\\\GitHub\\\\coll2030\\\\src\\\\ProductImageList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProductImageList() {\n  _s();\n\n  const [state, setData] = useState({\n    products: []\n  });\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (state.products.length > 0) {\n      if (window.IntersectionObserver) {\n        let observer = new IntersectionObserver((entries, observer) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              //  console.log(entry);\n              entry.target.src = entry.target.dataset.src;\n              observer.unobserve(entry.target);\n            }\n          });\n        }, {\n          threshold: 0.1\n        });\n        window.obz = observer;\n        window.obz.observe(document.querySelector('img'));\n      }\n    }\n  }, [state]);\n\n  async function fetchData() {\n    const gender = localStorage.getItem('gender');\n    const subcategory = localStorage.getItem('subcategory');\n    const category = localStorage.getItem('category');\n    const url = `/.netlify/functions/atlas?gender=${gender}&category=${category}&subcategory=pantolon&page=${100}`;\n    const response = await fetch(url, {\n      cache: 'default'\n    });\n    const {\n      data\n    } = await response.json();\n    setData({\n      products: data\n    });\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    spacing: 1,\n    sx: {\n      height: \"200px\"\n    },\n    children: state.products.map((item, i) => {\n      debugger;\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.plcHolder,\n          \"data-src\": 'https://res.cloudinary.com/codergihub/image/fetch/w_250/' + item.imageUrl,\n          alt: item.title,\n          loading: \"lazy\",\n          width: \"250\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductImageList, \"6Tw1vIR4k27h+8CCVbfnm3HCXyc=\");\n\n_c = ProductImageList;\n\nfunction ImageComponent(props) {\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: props.plcHolder,\n    \"data-src\": 'https://res.cloudinary.com/codergihub/image/fetch/w_250/' + item.imageUrl,\n    alt: item.title,\n    loading: \"lazy\",\n    width: \"250\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = ImageComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductImageList\");\n$RefreshReg$(_c2, \"ImageComponent\");","map":{"version":3,"names":["React","useEffect","useState","Grid","ProductImageList","state","setData","products","fetchData","length","window","IntersectionObserver","observer","entries","forEach","entry","isIntersecting","target","src","dataset","unobserve","threshold","obz","observe","document","querySelector","gender","localStorage","getItem","subcategory","category","url","response","fetch","cache","data","json","console","log","height","map","item","i","plcHolder","imageUrl","title","ImageComponent","props"],"sources":["C:/Users/IT/Documents/GitHub/coll2030/src/ProductImageList.js"],"sourcesContent":["\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport Grid from '@mui/material/Grid'\r\nexport default function ProductImageList() {\r\n  const [state, setData] = useState({ products: [] });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    fetchData()\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n   if(state.products.length>0){\r\n    if (window.IntersectionObserver) {\r\n\r\n      let observer = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            //  console.log(entry);\r\n            entry.target.src = entry.target.dataset.src;\r\n            observer.unobserve(entry.target);\r\n          }\r\n        });\r\n      }, { threshold: 0.1 });\r\n      window.obz = observer\r\n      window.obz.observe(document.querySelector('img'))\r\n    }\r\n   }\r\n\r\n  },[state]);\r\n\r\n  async function fetchData() {\r\n    const gender = localStorage.getItem('gender')\r\n    const subcategory = localStorage.getItem('subcategory')\r\n    const category = localStorage.getItem('category')\r\n    const url = `/.netlify/functions/atlas?gender=${gender}&category=${category}&subcategory=pantolon&page=${100}`\r\n\r\n    const response = await fetch(url, { cache: 'default' })\r\n\r\n    const { data } = await response.json()\r\n \r\n   setData({products:data})\r\n    console.log(data)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <Grid container justifyContent=\"center\" spacing={1} sx={{ height: \"200px\" }}\r\n    >\r\n      { state.products.map((item, i) => {\r\n   debugger;\r\n        return <Grid item key={i} >\r\n          <img\r\n            src={item.plcHolder}\r\n            data-src={'https://res.cloudinary.com/codergihub/image/fetch/w_250/' + item.imageUrl}\r\n            alt={item.title}\r\n            loading=\"lazy\"\r\n            width=\"250\"\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n\r\n\r\n  );\r\n}\r\n\r\n\r\nfunction ImageComponent(props){\r\n\r\n  return (\r\n    <img\r\n    src={props.plcHolder}\r\n    data-src={'https://res.cloudinary.com/codergihub/image/fetch/w_250/' + item.imageUrl}\r\n    alt={item.title}\r\n    loading=\"lazy\"\r\n    width=\"250\"\r\n  />\r\n  )\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}